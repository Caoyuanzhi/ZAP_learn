from ast import Expression
import os
from resource import struct_rusage
import sys
import re
import glob
import shutil
import configparser


svp_filelist = []
svhp_filelist = []
svp_para_dict = {}


def search_svp_file(root):
    all_items = os.listdir(root)
    for item in all_items:
        item_path = os.path.join(root,item)
        if os.path.isdir(item_path):
            search_svp_file(item_path)
        elif os.path.basename(item_path).endswith(".svp") or  os.path.basename(item_path).endswith(".svhp"):
            file_type = ""
            if os.path.basename(item_path).endswith(".svp"):
                file_type = ".svp"
            else:
                file_type = ".svhp"
            svp_filelist.append(item_path)
            
            file_name = item_path.split('/',-1)[-1]
            print("[SVP File Name] : %s"%(file_name))
            file_name = re.match(r"(.*).sv(h)?p",file_name).group(1)
            ##parse svp file## 
            input_svp_path = item_path
            output_sv_path = create_sv_file(root, file_name, file_type)
            #print(input_svp_path) 
            #print(output_sv_path)
            parse_svp_file(input_svp_path, output_sv_path) 

            
def create_sv_file(root, file_name, file_type):
    file_name_sv =file_name + (file_type.replace("p",""))
    expend_sv = open(os.path.join(root, file_name_sv), 'w')
    expend_sv.write("//**[ This file is auto generated by svp scripts, don't modify it !]**//")
    expend_sv.close()
    return os.path.join(root,file_name_sv)

def parse_svp_file(svp_file, sv_file):
    with open(svp_file, 'r') as input_svp:
        output_sv =open(sv_file, 'a')
        in_for_block_mark = 0
        tmp_context_stack = []
        tmp_context_stack_ptr = 0
        tmp_context_stack_ptr_saved = []
        for line in input_svp:  
            if re.match(r"^\s*//:.*", line):
                if re.match(r"^\s*//:Expend[(](\w+)[)]\s*=\s*(\d)", line):
                    #get_expand_parameter:
                    m = re.match(r"^\s*//:Expend[(](\w+)[)]\s*=\s*(\d)", line)
                    key = m.group(1)
                    value = m.group(2)
                    if key in svp_para_dict and svp_para_dict[key] != value:
                        print("[Error] : svp parameter '%s' \n\t in file '%s' is redefined, and has two different values"%(key, svp_file))
                    else:
                        svp_para_dict[key] = value
                elif re.match(r"^\s*//:for\(\s*[$](\w+)\s*=\s*(\d)\s*;\s*[$](\w+)\s*[<]\s*(\w+)\s*;\s*[$](\w+)\+\+\s*\)", line) and in_for_block_mark == 0: 
                    in_for_block_mark += 1
                    tmp_condition_stack = []
                    parse_for_block(line, svp_file, tmp_condition_stack)
                elif re.match(r"^\s*//:for\(\s*[$](\w+)\s*=\s*(\d)\s*;\s*[$](\w+)\s*[<]\s*(\w+)\s*;\s*[$](\w+)\+\+\s*\)", line) and in_for_block_mark != 0: 
                    in_for_block_mark += 1
                    tmp_context_stack_ptr_saved.append(tmp_context_stack_ptr)
                    #tmp_context_stack.append(line)  
                    #tmp_context_stack_ptr += 1          
                    parse_for_block(line, svp_file, tmp_condition_stack)
                elif re.match(r"^\s*//:[}]\s*$",line) and in_for_block_mark != 0:
                    #print("[STACK:]----- %s"%(tmp_context_stack))
                    #print("-------------------------------------------------------------------------------------")
                    in_for_block_mark -= 1
                    tmp_condition = tmp_condition_stack.pop()
                    iter_item = tmp_condition[0]
                    iter_begin_val = int(tmp_condition[1])
                    iter_end_val = int(tmp_condition[2])
                    inner_context = []
                    #regex = re.compile(r"$[{]"+iter_item+"[}]")
                    if(len(tmp_context_stack_ptr_saved) == 0):
                        context_stack_ptr_saved = 0
                    else:
                        context_stack_ptr_saved = int(tmp_context_stack_ptr_saved.pop()) 

                    for i in range(context_stack_ptr_saved,len(tmp_context_stack)):
                        tmp_context =  tmp_context_stack.pop()
                        #print("############----%s----%s"%(tmp_context, iter_item))
                        for j in range(iter_end_val-1,iter_begin_val-1, -1):   
                            str_replace = tmp_context.replace("${"+iter_item+"}", str(j))
                            tmp_context_stack.insert(context_stack_ptr_saved, str_replace)
                        #print("---------------------------------------------------stack_ptr%s"%(context_stack_ptr_saved))
                    #print("[STACK:]----- %s"%(tmp_context_stack))
                #elif re.match(r"^\s*//:[}]\s*$",line) and in_for_block_mark == 0:
                #    output_sv.write(tmp_context_stack)

            elif in_for_block_mark == 0:
                #print("[STACK:]----- %s"%(tmp_context_stack))
                if len(tmp_context_stack) != 0:
                    for i in range(0,len(tmp_context_stack)):
                        output_sv.write(tmp_context_stack[0])
                        del tmp_context_stack[0]
                output_sv.write(line)
            elif in_for_block_mark != 0:
                tmp_context_stack.append(line)
                tmp_context_stack_ptr += 1          
        if in_for_block_mark != 0:
            print("[Error] : unmatch '//:for(;;){' and '//:}' detected in svp file '%s' !"%(svp_file))
        

def parse_for_block(line, svp_file, tmp_condition_stack):
    #expand_ForBlock:    
    m = re.match(r"^\s*//:for\(\s*[$](\w+)\s*=\s*(\d)\s*;\s*[$](\w+)\s*[<]\s*(\w+)\s*;\s*[$](\w+)\+\+\s*\)", line)
    iter_item = m.group(1)
    iter_begin_val = m.group(2)
    iter_end_val = m.group(4)
    if iter_end_val.isdigit():
        #print("[for_block] iter_item:%s begin:%s end:%s"%(iter_item, iter_begin_val, iter_end_val))
        curr_iter_condition = [iter_item, iter_begin_val, iter_end_val]
        tmp_condition_stack.append(curr_iter_condition)
    else:
        if iter_end_val in svp_para_dict:
            iter_end_val = svp_para_dict[iter_end_val]
            #print("[for_block] iter_item:%s begin:%s end:%s"%(iter_item, iter_begin_val, iter_end_val))
            curr_iter_condition = [iter_item, iter_begin_val, iter_end_val]
            tmp_condition_stack.append(curr_iter_condition)
        else:
            print("[Error] : undefined svp parameter '%s' \n\t in file '%s' "%(iter_begin_val,svp_file))
    return tmp_condition_stack

if __name__ == "__main__":
    print(os.getcwd())
    search_svp_file(os.getcwd())



